/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>


#include "node_free.h"
#include "layers.h"
#include "keyboards/linux.h"
#include "keyboards/windows.h"
#include "keyboards/macos.h"

#define ___ &trans


/* Base layer layout
    ╭─────┬─────┬─────┬─────┬─────┬─────╮   ╭─────┬─────┬─────┬─────┬─────┬─────╮
    │TB|GU│  Q  │  W  │  E  │  R  │  T  │   │  Y  │  U  │  I  │  O  │  P  │ BSPC│
    │C|ESC│  A  │  S  │  D  │  F  │  G  │   │  H  │  J  │  K  │  L  │  ;  │'|RC │
    │ LSFT│  Z  │  X  │  C  │  V  │  B  │   │  N  │  M  │  ,  │  ;  │  .  │ RSFT│
    ╰─────┴─────┴─────┼─────┼─────┼─────┤   ├─────┼─────┼─────┼─────┴─────┴─────╯
                      │ LALT│LW/FU│SF-SP│   │ ENT │ RSE │DL/AT│
                      ╰─────┴─────┴─────╯   ╰─────┴─────┴─────╯
*/


//tap dance definition for ctrl+esc
TAPDANCE(td_ctrl_esc, <&kp LCTRL>, <&kp ESC>)

// tapdance td0 refactor for FUN layer
TAPDANCE(td0, &mo LOWER, &mo FUN)

// tapdance td1 refactor for shift+caps
TAPDANCE(td1, &kp LSHFT, &kp CAPS)

LAYER(DEFAULT ,
  &mt LGUI TAB,   &kp Q,  &kp W,  &kp E,  &kp R,  &kp T,    ___,      &kp Y,      &kp U,  &kp I,      &kp O,    &kp P,    &kp BSPC,
  &kp LCTRL,      &kp A,  &kp S,  &kp D,  &kp F,  &kp G,    ___,      &kp H,      &kp J,  &kp K,      &kp L,    &kp SEMI, &mt RCTL SINGLE_QUOTE,
  &td1,           &kp Z,  &kp X,  &kp C,  &kp V,  &kp B,    ___,      &kp N,      &kp M,  &kp COMMA,  &kp DOT,  &kp FSLH, &mt RSHFT ESC,
                                  ___,    &td0,   &kp SPC,  &lt NAV,  &mo RAISE,  &mt RALT DEL
)

/*lower layer layout
    ╭─────┬─────┬─────┬─────┬─────┬─────╮   ╭─────┬─────┬─────┬─────┬─────┬─────╮
    │     │  1  │  2  │  3  │  4  │  5  │   │  6  │  7  │  8  │  9  │  0  │ BSPC│
    │     │ BT5 │LEFT │DOWN │ UP  │RIGHT│   │     │  -  │  =  │  (  │  )  │  \  │
    │     │ BT1 │ BT2 │ BT3 │ BT4 │USBTt│   │     │     │     │     │     │     │
    ╰─────┴─────┴─────┼─────┼─────┼─────┤   ├─────┼─────┼─────┼─────┴─────┴─────╯
                      │     │     │     │   │     │     │ ALT │
                      ╰─────┴─────┴─────╯   ╰─────┴─────┴─────╯
*/

/* raise layer layout 
    ╭─────┬─────┬─────┬─────┬─────┬─────╮   ╭─────┬─────┬─────┬─────┬─────┬─────╮
    │     │  !  │  @  │  #  │  $  │  %  │   │  ^  │  &  │  *  │  (  │  )  │ DEL │
    │     │     │     │     │     │     │   │  -  │  =  │  [  │  ]  │  \  │  `  │
    │     │     │     │     │     │     │   │  _  │  +  │  {  │  }  │  |  │  ~  │
    ╰─────┴─────┴─────┼─────┼─────┼─────┤   ├─────┼─────┼─────┼─────┴─────┴─────╯
                      │     │     │     │   │     │     │     │
                      ╰─────┴─────┴─────╯   ╰─────┴─────┴─────╯
*/

/* Fun layer layout 
    ╭─────┬─────┬─────┬─────┬─────┬─────╮   ╭─────┬─────┬─────┬─────┬─────┬─────╮
    │     │ F1  │ F2  │ F3  │ F4  │     │   │  -  │  7  │  8  │  9  │     │BCSPC│
    │     │ F5  │ F6  │ F7  │ F8  │BTCLR│   │     │  4  │  5  │  6  │  -. │  /  │
    │     │ F9  │ F10 │ F11 │ F12 │     │   │     │  1  │  2  │  3  │  +  │  *  │
    ╰─────┴─────┴─────┼─────┼─────┼─────┤   ├─────┼─────┼─────┼─────┴─────┴─────╯
                      │     │     │     │   │     │     │     │
                      ╰─────┴─────┴─────╯   ╰─────┴─────┴─────╯
*/

/* NAVI layer layout 
    ╭─────┬─────┬─────┬─────┬─────┬─────╮   ╭─────┬─────┬─────┬─────┬─────┬─────╮
    │     │ F1  │ F2  │ F3  │ F4  │     │   │home │PG_UP│ ins │     │ del │Bcksp│
    │     │ F5  │ F6  │ F7  │ F8  │BTCLR│   │Left │ down│ up  │right│     │     │
    │     │ F9  │ F10 │ F11 │ F12 │     │   │end  │PG_DW│     │     │ opt │     │
    ╰─────┴─────┴─────┼─────┼─────┼─────┤   ├─────┼─────┼─────┼─────┴─────┴─────╯
                      │     │     │     │   │     │     │     │
                      ╰─────┴─────┴─────╯   ╰─────┴─────┴─────╯
*/

/* Ajust Layer layout
    ╭─────┬─────┬─────┬─────┬─────┬─────╮   ╭─────┬─────┬─────┬─────┬─────┬─────╮
    │RESET│     │     │     │     │     │   │  -  │  7  │  8  │  9  │  +  │     │
    │     │     │     │     │     │     │   │  *  │  4  │  5  │  6  │  .  │     │
    │     │     │     │     │     │     │   │  /  │  1  │  2  │  3  │  0  │  =  │
    ╰─────┴─────┴─────┼─────┼─────┼─────┤   ├─────┼─────┼─────┼─────┴─────┴─────╯
                      │     │     │     │   │     │     │     │
                      ╰─────┴─────┴─────╯   ╰─────┴─────┴─────╯
*/


//Macro redefine with snippet from node_free.h
//Following is qu in french layout:
MACRO(q_u, bindings = <&kp FR_Q &kp FR_U>;)
//linux specific macro because caps lock is used as mod-morph
MACRO(q_u_up_lnx,
  tap-ms = <LNX_CAPS_DELAY>;
  // Using Caps Lock because LSHFT/RSHFT are retained by Mod-Morph on Linux.
  bindings = <&kp CAPS &kp FR_Q &kp CAPS &kp FR_U>;
)
MORPH_UP(qu_lnx, q_u, q_u_up_lnx)

MORPH_UP(agrv, &kp FR_AGRV, &kp FR_AGRV_UP)
MORPH_UP(eacu, &kp FR_EACU, &kp FR_EACU_UP)
MORPH_UP(egrv, &kp FR_EGRV, &kp FR_EGRV_UP)

MORPH_UP(caret_excl, &kp FR_CARET, &kp FR_EXCL)
MORPH_UP(comma_semi, &kp FR_COMMA, &kp FR_SEMI)
MORPH_UP(dot_colon,  &kp FR_DOT,   &kp FR_COLON)
MORPH_UP(sqt_qmark,  &kp FR_SQT,   &kp FR_QMARK)

/ {
/*
 * tap dance test
 */

    behaviors {
        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&mo 1>,
                <&mo 3>;
        };
        td1: tap_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings =
                <&kp LSHFT>,
                <&kp CAPS>;
        };
    };
        

keymap {
  compatible = "zmk,keymap";

  _BASE {
    label = "Home";
    // -----------------------------------------------------------------------------------------
    // | TAB|  Q  |  W  |  E  |  R  |   T    |   |  Y  |  U   |    I    |  O  |  P  | BKSP   |
    // |  CTRL  |  A  |  S  |  D  |  F  |   G    |   |  H  |  J   |    K    |  L  |  ;  | ù/RCTRL|
    // | SFT/CP |  Z  |  X  |  C  |  V  |   B    |   |  N  |  M   |    ,    |  .  |  /  |ESC/RSFT|
    //                | LALT| LWR/FUN | SFT-SPC|   | ENT |  RSE | DEL/ALT |

    bindings =  <
      &kp TAB         &kp Q   &kp W       &kp E       &kp R   &kp T               &kp Y           &kp U       &kp I       &kp O   &kp P     &kp BSPC
      &kp LCTRL       &kp A   &kp S       &kp D       &kp F   &kp G               &kp H           &kp J       &kp K       &kp L   &kp SEMI  &mt RCTRL SINGLE_QUOTE
      &mt LGUI ESC    &kp Z   &kp X       &kp C       &kp V   &kp B               &kp N           &kp M       &kp COMMA   &kp DOT &kp FSLH  &mt RSHFT ESC
      &kp LALT    &td0    &mt LSHFT SPC       &lt NAV ENTER   &mo RAISE   &mt RALT DEL
    >;
  };

  _LOWER {
    label = "Lowa'";
    // -----------------------------------------------------------------------------------------
    // |      |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
    // |      | BT5 |LEFT | DOWN|  UP |RIGHT|   |     |  -  |  =  |  (  |  )  |   \  |
    // |      | BT1 | BT2 | BT3 | BT4 |USBTt|   |     |     |     |     |     |      |
    //                    | GUI |     |     |   |     |     | ALT |

    bindings =  <
      &trans &kp N1          &kp N2          &kp N3          &kp N4          &kp N5          &kp N6  &kp N7     &kp N8       &kp N9              &kp N0              &trans
      &trans &bt BT_SEL 4    &kp LEFT        &kp DOWN        &kp UP          &kp RIGHT       &none   &kp MINUS  &kp EQUAL    &kp LEFT_BRACKET    &kp RIGHT_BRACKET   &kp BACKSLASH
      &trans &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    &out OUT_TOG    &trans  &trans     &trans       &trans              &trans              &trans
      &trans          &trans          &trans          &trans  &mo ADJUST &trans
    >;
  };

  _RAISE {
    label = "Higha'";
    // -----------------------------------------------------------------------------------------
    // |      |   !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | DEL  |
    // |      |      |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
    // |      |      |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
    //                     |     |     |     |   |     |     |     |

    bindings =  <
      &trans &kp EXCL        &kp AT  &kp HASH      &kp DLLR      &kp PRCNT            &kp CARET   &kp AMPS        &kp ASTRK   &kp LPAR        &kp RPAR        &kp DEL
      &trans &none           &none   &none         &none         &none                &none       &kp UNDERSCORE  &kp PLUS    &kp LEFT_BRACE  &kp RIGHT_BRACE &kp PIPE
      &trans &kp NON_US_BSLH &trans  &kp C_VOL_DN  &kp C_VOL_UP  &kp C_MUTE           &none       &none           &none       &none           &none           &none
      &trans        &mo ADJUST    &trans               &trans      &trans          &trans
    >;
  };

  _FUN {
    label = "Funkia'";
    // -----------------------------------------------------------------------------------------
    // |      | F1  | F2  | F3  | F4  |     |   |  -  |  7  |  8  |  9  |     |BCSPC|
    // |      | F5  | F6  | F7  | F8  |BTCLR|   |     |  4  |  5  |  6  |  -. |  /  |
    // |      | F9  | F10 | F11 | F12 |     |   |     |  1  |  2  |  3  |  +  |  *  |
    //                    |     |     | SPC |   |     |     |     |

    bindings = <
      &trans   &kp F1   &kp F2  &kp F3  &kp F4   &none            &none            &kp KP_N7  &kp KP_N8  &kp KP_N9   &none        &kp BACKSPACE
      &trans   &kp F5   &kp F6  &kp F7  &kp F8   &bt BT_CLR       &none            &kp KP_N4  &kp KP_N5  &kp KP_N6   &kp KP_MINUS &kp KP_DIVIDE
      &trans   &kp F9  &kp F10  &kp F11 &kp F12  &none            &none            &kp KP_N1  &kp KP_N2  &kp KP_N3   &kp KP_PLUS  &kp KP_MULTIPLY
      &trans  &trans   &trans           &kp KP_ENTER     &kp KP_N0  &kp KP_DOT
    >;  
  };

  _NAV {
    label = "Saila'";
    // -----------------------------------------------------------------------------------------
    // |     | F1  | F2  | F3  | F4  |     |        | home|PG_UP| ins |     | del |Bcksp|
    // |     | F5  | F6  | F7  | F8  |BTCLR|        | Left| down| up  |right|     |     |
    // |     | F9  | F10 | F11 | F12 |     |        | end |PG_DW|     |     | opt |     |
    //                   |     |     | SPC |        |     |     |     |

    bindings =  <
      &trans  &kp F1   &kp F2   &kp F3   &kp F4   &none   &kp HOME  &kp PG_UP  &kp INS  &trans    &kp DEL  &kp BACKSPACE
      &trans  &kp F5   &kp F6   &kp F7   &kp F8   &none   &kp LEFT  &kp DOWN   &kp UP   &kp RIGHT &trans   &trans
      &trans  &kp F9   &kp F10  &kp F11  &kp F12  &none   &kp END   &kp PG_DN  &trans   &trans    &kp K_APP   &trans
      &trans   &trans  &trans   &trans     &trans   &trans
    >;  
  };

  _ADJUST {
    label = "Adj";
    // -----------------------------------------------------------------------------------------
    // | RESET|      |     |     |     |     |   |  -  |  7  |  8  |  9  |  +  |     |
    // |      |      |     |     |     |     |   |  *  |  4  |  5  |  6  |  .  |     |
    // |      |      |     |     |     |     |   |  /  |  1  |  2  |  3  |  0  |  =  |
    //                     |     |     |     |   |     |     |     |

    bindings =  <
      &bootloader      &none            &none            &none            &none                   &kp PRINTSCREEN &kp KP_NUMLOCK  &kp CAPS    &kp SCROLLLOCK &none    &none   &none
      &none            &none            &none            &none            &aalt                   &agrav           &none           &none       &none          &none    &none   &none
      &none            &none            &none            &none            &none                   &trans          &none           &none       &none          &none    &none   &none
      &trans           &trans           &trans                  &trans          &trans          &trans
    >;
  };

};
};
